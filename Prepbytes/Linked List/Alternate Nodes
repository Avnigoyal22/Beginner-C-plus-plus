#include <iostream>
using namespace std;

class node{
    public:
    int data;
    node* next;

    node(int val){
        data = val;
        next = NULL;
    }
};

void insert_end(node* &head, int val){
    node* n = new node(val);

    if(head == NULL){
        head = n;
        return;
    }

    node* temp = head;

    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next = n;
}

//Alternate Nodes
void fun(node* start)
{
  if(start == NULL)
    return;
  cout << start->data<<" ";
  
  if(start->next != NULL )
    fun(start->next->next);
  cout << start->data<<" ";
}

void display(node* head){
    node* temp = head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}

int main(){

    node* head=NULL;
    insert_end(head, 10);
    insert_end(head, 20);
    insert_end(head, 30);
    insert_end(head, 40);
    insert_end(head, 50);
    insert_end(head, 60);

    cout<<"Orginal Linked List: ";
    display(head);

    cout<<endl;

    fun(head);

    return 0;
}

// If we have even number of nodes, the last node is skipped
